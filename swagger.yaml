openapi: 3.0.3
info:
  title: Pipeline service
  description: 
    This is a pipeline service that can create pipelines, start them and get status of runned job.

  version: 1.0.0
tags:
  - name: pipelines
    description: Everything about pipelines
  - name: jobs
    description: Everything about jobs
paths:
  /pipeline:
    post:
      tags:
        - pipelines
      summary: Create new pipeline
      description: Create new pipeline
      operationId: create_pipeline
      requestBody:
        description: Create new pipeline
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
        required: true
      responses:
        '200':
          description: Successful creation
        '400':
          description: Invalid input
        '409':
          description: Name of pipeline has already used
        '422':
          description: Validation exception
  /job/start/{pipeline_name}:
    post:
      tags:
        - jobs
      summary: Start job with existing pipeline
      description: Start job with existing pipeline
      operationId: start_pipeline_by_name
      parameters:
        - name: pipeline_name
          in: path
          description: Name of pipeline that needs to be started
          required: true
          schema:
            type: string
      requestBody:
        description: Start job with existing pipeline
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartJobSchema'
        required: true
      responses:
        '200':
          description: Successful start pipeline
          content:
            application/json:
              schema:
                type: object
                properties:
                  job_id:
                    type: integer
                    description: ID started job
                    example: 10     
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /job/status/{job_id}:
    get:
      tags:
        - jobs
      summary: Status of runned job
      description: Status of runned job
      operationId: status_job_by_id
      parameters:
        - name: job_id
          in: path
          description: Id of runned job
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Status of job
          content:
            application/json:
              schema:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/SuccessEndedJob'
                  - $ref: '#/components/schemas/JobEndedWithError'
        '400':
          description: Invalid input
  
  
components:
  schemas:
    Pipeline:
      type: object
      required:
        - pipeline_name
        - stages
      properties:
        pipeline_name:
          type: string
          description: Name of pipeline
          example: Authorization
        stages:
          type: object
          description: Description of every stage in pipeline with its order number as key
          additionalProperties: 
            $ref: '#/components/schemas/Stage'
          example: 
            "1":
                {
                    "stage_type": "HTTP",
                    "stage_params": 
                        {
                            "url_path": "server.com/users",
                            "method": "POST",
                            "data": ["login", "password"],
                            "return_values": ["user_id"],
                            "return_codes": [200]
                        }
                }
            "2":
                {
                    "stage_type": "HTTP",
                    "stage_params": 
                        {
                            "url_path": "server.com/auth",
                            "method": "POST",
                            "data": ["user_id"],
                            "return_values": ["jwt"],
                            "return_codes": [200]
                        }
                }
    Stage:
      type: object
      required:
        - stage_type
        - stage_params
      properties:
        stage_type:
          type: string
          description: Type of stage
          enum:
            - HTTP
            - Database
          example: HTTP
        stage_params:
          type: object
          description: Parameters of stage
          oneOf:
            - $ref: '#/components/schemas/HTTPStage'
            - $ref: '#/components/schemas/DatabaseStage'
    HTTPStage:
      type: object
      required:
        - url_path
        - method
      properties:
        url_path:
          type: string
          description: URL-path to service
          example: server.com/users
        method:
          type: string
          description: HTTP-method of request
          enum:
            - POST
            - GET
          example: POST
        path_params:
          type: array
          description: Keys of path parameters needed in request
          items:
            type: string
          example:
            ["path_key1", "path_key2"]
        query_params:
          type: array
          description: Keys of query parameters needed in request
          items:
            type: string
          example:
            ["query_key1", "query_key2"]
        input_data:
          type: array
          description: Keys of input data needed in request
          items:
            type: string
          example:
            ["data_key1", "data_key2"]
        return_values:
          type: array
          description: Keys of return values of stage
          items:
            type: string
          example:
            ["return_value_key1", "return_value_key2"]
        return_codes:
          type: array
          description: Correct HTTP-responce codes to continue execute stages
          items:
            type: integer
          example: [200, 201]
    
    DatabaseStage:
      type: object
      properties:
        request:
          type: string
          description: Request to databse
          example: select * from db
    
    StartJobSchema:
      type: object
      properties:
        path_params:
          type: object
          additionalProperties:
            type: string
          description:  Key/value for path parameters
          example: 
            path_key1: "path_value1"
            path_key2: "path_value2"
        query_params:
          type: object
          additionalProperties:
            type: string
          description:  Key/value for query parameters
          example: 
            query_key1: "query_value1"
            query_key2: "query_value2"
        input_data:
          type: object
          additionalProperties:
            type: string
          description:  Key/value for input_data
          example: 
            data_key1: "data_value1"
            data_key2: "data_value2"
    SuccessEndedJob:
      type: string
      example: Success ended
    JobEndedWithError:
      type: object
      properties:
        error_code:
          type: integer
          description: Error code
          example: 409
        error_message:
          type: string
          description: Error message
          example: Can't insert into database via conflict name
  examples:
    FirstExampleStage:
      value:
        HTTPStage:
          - url_path: server.com/users
            method: POST
            input_data: ["login", "password"]
            return_value: user_id
            return_codes: [200]
